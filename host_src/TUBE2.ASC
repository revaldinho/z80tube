10  'Amstrad CPC-Acorn Tube Host Code
20  '(C) 2018 Hoglet, BigEd, Revaldinho
30 DIM A$(16)
40 MODE 2: INK 0,0 : INK 1,26 : BORDER 0
50 'GOSUB 1500 : 'Assemble with Maxam
60 OUT &FC16, 7  :'Select CPU
70 OUT &FC10,&AE :'Tube RESET
80 OUT &FC10,&20
90 WHILE 1=1
100    GOSUB 190
110   'PRINT HEX$(A,2);" ";
120   ON (A+1) GOSUB 750, 720, 780, 720, 720,720, 720,720,720,720,950
130 WEND
140 END
150 'Wait on data from FIFO R1 
160 WHILE (INP(&FC10) AND &80)=0: WEND
170 A=INP(&FC11)
180 RETURN
190 'Get FIFO R2 without blocking FIFO R1 traffic
200 WHILE (INP(&FC12) AND &80)=0 
210   GOSUB 1880: 'CALL fifo1
220 WEND
230 A=INP(&FC13)
240 RETURN
250 'Get FIFO R3 without blocking FIFO R1 traffic
260 WHILE (INP(&FC14) AND &80)=0 
270   GOSUB 1880: 'CALL fifo1
280 WEND
290 A=INP(&FC15)
300 RETURN
310 'Get FIFO R4 without blocking FIFO R1 traffic
320 WHILE (INP(&FC16) AND &80)=0 
330   GOSUB 1880: 'CALL fifo1
340 WEND
350 A=INP(&FC17)
360 RETURN
370 'Write parameter T to FIFO R2 without blocking FIFO R1 traffic
380 WHILE (INP(&FC12) AND &40)=0 
390   GOSUB 1880: 'CALL fifo1
400 WEND
410 OUT (&FC13), T
420 RETURN
430 'Write parameter T to FIFO R3 without blocking FIFO R1 traffic
440 WHILE (INP(&FC14) AND &40)=0 
450   GOSUB 1880: 'CALL fifo1
460 WEND
470 OUT (&FC15), T
480 RETURN
490 'Write parameter T to FIFO R4 without blocking FIFO R1 traffic
500 WHILE (INP(&FC16) AND &40)=0 
510   GOSUB 1880: 'CALL fifo1
520 WEND
530 OUT (&FC17), T
540 RETURN
550 'Flush incoming FIFO R3
560 WHILE (INP(&FC14) AND &80)<>0 
570   A=INP(&FC15)
580   T=24 : GOSUB 610
590 WEND
600 RETURN
610 'Delay by at least T us
620 N=TIME
630 WHILE TIME-N < T*0.0003 : WEND
640 RETURN
650 'Write string parameter T$ to FIFO R2, terminated with &0D
660 FOR i=1 TO LEN(T$)
670   T=ASC(MID$(T$,i,1)): GOSUB 370
680 NEXT
690 T=13 : GOSUB 370
700 RETURN
710 'DUMMY Destination for unhandled calls
720 PRINT "[Unhandled Trap]"
730 RETURN
740 'RDCH
750 PRINT "[RDCH]";
760 RETURN
770 'Read and report CLI string
780 'PRINT "[OSCLI]";
790 T$=""
800 WHILE A<> &D
810   GOSUB 190
820   IF A>31 THEN T$=T$+CHR$(A)
830 WEND
840 GOSUB 1050 : 'Tokenise the string
850 'PRINT "OSCLI Str ", A$(1)
860 IF A$(1)="LOAD" THEN GOTO 910
870 IF A$(1)="CAT" THEN CAT : GOTO 920
880 IF A$(1)="|B" THEN |B : GOTO 920
890 IF A$(1)="|A" THEN |A : GOTO 920
900 GOTO 920
910 GOSUB 1150
920 T=&7F : GOSUB 370
930 RETURN
940 'Read and handle OSWORD0
950 'PRINT "[OSWORD0]";
960 FOR B=1 TO 5
970   GOSUB 190
980 NEXT
990 T=&7F : GOSUB 370
1000 INPUT T$
1010 IF T$="" THEN GOSUB 1870
1020 GOSUB 660
1030 RETURN
1040 'Tokenise string T$, max 16 words, return strings in A$()
1050 N=1
1060 A$(N)=""
1070 FOR L=1 TO LEN(T$)
1080   C$=MID$(T$,L,1)
1090   IF C$<>" " THEN A$(N)=A$(N)+C$: GOTO 1110
1100   N=N+1: A$(N)=""
1110 NEXT L
1120 WHILE I<16:A$(I)="":I=I+1:WEND
1130 RETURN
1140 ' LOAD <FILENAME> [ADDRESS:&1000] [WORDSIZE:&4]
1150 PRINT "Loading File ";A$(2);
1160 OPENIN A$(2)
1170 IF A$(3)=""THEN ADR=&1000 ELSE ADR=VAL("&"+A$(3))
1180 IF A$(4)=""THEN INC=4 ELSE INC=VAL(A$(4))
1190 TOTE=0
1200 WHILE NOT EOF
1210   LINE INPUT #9, H$
1220   IF LEFT$(H$,1)="#" THEN GOTO 1600
1230   T=&1 : GOSUB 490
1240   T=&AA : GOSUB 490
1250   T=&0 : GOSUB 490
1260   T=&0 : GOSUB 490
1270   T=INT(ADR/256) : GOSUB 490
1280   T=ADR AND &FF  : GOSUB 490
1290   T=&FF : GOSUB 490
1300   T=24 : GOSUB 610
1310   FOR I=1 TO LEN(H$) STEP 2
1320     T=VAL("&"+MID$(H$,I,2)) : GOSUB 430
1330     T=24 : GOSUB 610
1340   NEXT I
1350   ' GOTO 1420 : 'Skip Readback 
1360   ' Read back data and correct errors
1370   GOSUB 550: 'Flush R3 FIFO first
1380   E=0 
1390   T=&0 : GOSUB 490
1400   T=&AA : GOSUB 490
1410   T=&0 : GOSUB 490
1420   T=&0 : GOSUB 490
1430   T=INT(ADR/256) : GOSUB 490
1440   T=ADR AND &FF  : GOSUB 490
1450   T=&FF : GOSUB 490
1460   T=24 : GOSUB 610
1470   FOR I=1 TO LEN(H$) STEP 2
1480     T=VAL("&"+MID$(H$,I,2))
1490     GOSUB 250
1500     IF A=T THEN GOTO 1530
1510     E=E+1
1520     PRINT "Error at line adr=";(HEX$(ADR,6)); "Exp.: ";HEX$(T,2);" Actual: ";HEX$(A,2)
1530     T=24 : GOSUB 610
1540   NEXT I
1550   IF E=0 THEN GOTO 1580
1560   TOTE=TOTE+E
1570   GOTO 1230
1580   PRINT ".";
1590   ADR=ADR+INT(LEN(H$)/(2*INC))
1600 WEND
1610 CLOSEIN
1620 T=&5 : GOSUB 490
1630 T=&AA : GOSUB 490
1640 IF TOTE>0 THEN PRINT "DONE (corrected ";TOTE;" errors)" ELSE PRINT "DONE"
1650 RETURN
1660 ' MAXAM Assembler for simple R1/R2 handling loop
1670 MEMORY HIMEM-128
1680 fifo1=HIMEM+1
1690 |ASSEMBLE
1700 '.top
1710 'LD B,&FC
1720 'LD C,&10
1730 'IN A,(C)
1740 'RET P
1750 'LD C,&11
1760 'IN A,(C)
1770 'PUSH AF
1780 'CALL &BB5A
1790 'POP AF
1800 'JR NZ, top
1810 'LD C,&13
1820 'LD A,&7F
1830 'OUT (C),A
1840 'JR top
1850 'END
1860 RETURN
1870 'FIFO1 Service loop
1880 IF (INP(&FC10) AND &80)=0 THEN RETURN
1890 A=INP(&FC11)
1900 IF A>0 THEN GOTO 1930
1910 T=&7F : GOSUB 370
1920 GOTO 1880
1930 IF A=12 OR A=16 THEN CLS : GOTO 1880: 'CLRTXT, CLRGFX
1940 IF A=18 THEN GOTO 2190: 'GCOL
1950 IF A=22 THEN GOTO 2240: 'MODE
1960 IF A=25 THEN GOTO 2010: 'PLOT
1970 IF A=29 THEN GOTO 2110: 'VDU29
1980 PRINT CHR$(A);
1990 'IF A > 31 THEN PRINT CHR$(A); ELSE PRINT "[";HEX$(A,2);"]";
2000 GOTO 1880
2010 'VDU_PLOT
2020 GOSUB 150 
2030 TYPE=A : GOSUB 150 
2040 X=A : GOSUB 150 
2050 X=X+256*A : GOSUB 150 
2060 Y=A : GOSUB 150
2070 Y=Y+256*A
2080 IF TYPE=4 THEN MOVE X,Y
2090 IF TYPE=5 THEN DRAW X,Y
2100 GOTO 1880
2110 'VDU29
2120 GOSUB 150
2130 X=A :GOSUB 150
2140 X=X+256*A :GOSUB 150
2150 Y=A :GOSUB 150
2160 Y=Y+256*A
2170 ORIGIN X,Y
2180 GOTO 1880
2190 'GCOL
2200 GOSUB 150
2210 C=A :GOSUB 150
2220 INK C,A
2230 GOTO 1880
2240 'MODE
2250 GOSUB 150
2260 IF A=0 OR A=3 THEN MODE 2
2270 IF A=1 OR A=4 OR A=6 OR A=7 THEN MODE 1
2280 IF A=2 OR A=5 THEN MODE 0
2290 GOTO 1880
2300 ' End of VDU Handling

